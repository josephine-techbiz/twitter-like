{"remainingRequest":"D:\\JOSEPHINE\\Jobs\\Ordivo\\twitter-clone-master\\twitter-clone-master\\node_modules\\babel-loader\\lib\\index.js!D:\\JOSEPHINE\\Jobs\\Ordivo\\twitter-clone-master\\twitter-clone-master\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\JOSEPHINE\\Jobs\\Ordivo\\twitter-clone-master\\twitter-clone-master\\src\\services\\api.js","dependencies":[{"path":"D:\\JOSEPHINE\\Jobs\\Ordivo\\twitter-clone-master\\twitter-clone-master\\src\\services\\api.js","mtime":1643414814000},{"path":"D:\\JOSEPHINE\\Jobs\\Ordivo\\twitter-clone-master\\twitter-clone-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635135415628},{"path":"D:\\JOSEPHINE\\Jobs\\Ordivo\\twitter-clone-master\\twitter-clone-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1650688898965},{"path":"D:\\JOSEPHINE\\Jobs\\Ordivo\\twitter-clone-master\\twitter-clone-master\\node_modules\\eslint-loader\\index.js","mtime":1636708110245}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/JOSEPHINE/Jobs/Ordivo/twitter-clone-master/twitter-clone-master/src/services/api.js"],"names":["axios","MockAdapter","store","userOneAuthInfo","users","tweets","trends","mock","delayResponse","onPost","reply","user","onGet","config","unshift","JSON","parse","data","onPatch","request","requestedTweet","find","twt","id","requestedIndex","indexOf","content","message","onDelete","tweetId","findedTweet","indexOfTweet","splice","filter","author","onPut","me","usr","getters","getMyProfileId","myIndex","Object","keys","map","key","profile","response","updatedProfile","login","body","type","path","getTweets","getTrends","getMe","uploadTweet","deleteTweet","updateTweet","getUsersTweets","setProfileInfo","settings","commit"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport store from '@/store'\nimport {userOneAuthInfo, users, tweets, trends} from './mockdata'\n\nconst mock = new MockAdapter(axios, {delayResponse: 250});\nmock.onPost(\"/auth\", userOneAuthInfo).reply(200, {user: users[0]});\nmock.onGet(\"/tweets\").reply(200, {tweets});\nmock.onGet(\"/trends\").reply(200, {trends});\nmock.onPost(\"/tweets\").reply(function (config) {\n  tweets.unshift(JSON.parse(config.data))\n  return [200, tweets]\n});\n\nmock.onPatch(\"/tweets\").reply(function (config) {\n  const request = JSON.parse(config.data)\n  \n  const requestedTweet = tweets.find(twt => twt.id == request.id);\n  const requestedIndex = tweets.indexOf(requestedTweet);\n\n  tweets[requestedIndex].content = request.content;\n\n  return [200, {\n    message: 'Tweet is editted succesfully',\n    id: request.id\n  }]\n});\n\nmock.onDelete(\"/tweets\").reply(function (config) {\n  const tweetId = config.tweetId\n\n  const findedTweet = tweets.find(twt => twt.id == tweetId)\n  const indexOfTweet = tweets.indexOf(findedTweet)\n\n  tweets.splice(indexOfTweet, 1);\n\n  return [200, {\n    message: 'Deleted successfully',\n    tweetId\n  }]\n});\n\nmock.onPost(\"/me\", {id: users[0].id}).reply(200, users[0]);\n\nmock.onGet(`/tweets/${users[0].id}`).reply(function() {\n  return [200, {\n    tweets: tweets.filter(twt => twt.author.id == users[0].id)\n  }]\n});\n\nmock.onPut('/me').reply(function (config) {\n  const request = JSON.parse(config.data)\n\n  const me = users.find(usr => usr.id == store.getters.getMyProfileId)\n  const myIndex = users.indexOf(me);\n\n  Object.keys(request).map(key => {\n    users[myIndex].profile[key] = request[key]\n  })\n\n  const response = {\n    message: 'Editted succesfully!',\n    updatedProfile: users[myIndex].profile\n  }\n  return [200, response]\n})\n\n\nexport async function login(body){\n  return request({type: 'post', path: '/auth', body})\n}\n\nexport async function getTweets(){\n  return request({type: 'get', path: '/tweets'})\n}\n\nexport async function getTrends(){\n  return request({type: 'get', path: '/trends'})\n}\n\nexport async function getMe(body){\n  return request({type: 'post', path: '/me', body})\n}\n\nexport async function uploadTweet(body){\n  return request({type: 'post', path: '/tweets', body})\n}\n\nexport async function deleteTweet(body){\n  return request({type: 'delete', path: '/tweets', body})\n}\n\nexport async function updateTweet(body){\n  return request({type: 'patch', path: '/tweets', body})\n}\n\nexport async function getUsersTweets(body){\n  return request({type: 'get', path: `/tweets/${body.id}`})\n}\n\n\nexport async function setProfileInfo(body){\n  return request({type: 'put', path: `/me`, body})\n}\n\n\n\nasync function request(settings){\n  store.commit(\"setLoadingStatus\", true)\n  try {\n    if(settings.body){\n      const response = await axios[settings.type](settings.path, settings.body);\n      store.commit(\"setLoadingStatus\", false)\n      return response;\n    }\n    const response = await axios[settings.type](settings.path);\n    store.commit(\"setLoadingStatus\", false)\n    return response;\n  }catch(err) {\n    store.commit(\"setLoadingStatus\", false)\n    throw err\n  }\n}"]}]}